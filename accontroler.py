import broadlink
import time
from scapy.all import ARP, Ether, srp

device = broadlink.hello('10.10.10.31')
device.auth()
#device.enter_learning()
#packet = device.check_data()

# midea dry mode
packet_dry = b'&\x00\xca\x00\x91\x90\x116\x10\x14\x106\x10\x14\x10\x13\x10\x14\x10\x13\x107\x106\x11\x13\x10\x13\x10\x14\x10\x13\x10\x13\x11\x13\x107\x10\x13\x107\x107\x106\x11\x13\x10\x13\x10\x14\x10\x13\x107\x107\x106\x116\x107\x107\x107\x106\x116\x107\x107\x107\x106\x116\x107\x107\x10\x13\x107\x107\x116\x11\x12\x116\x116\x115\x12\xab\x92\x90\x12\x11\x125\x12\x11\x134\x134\x125\x124\x13\x11\x12\x11\x134\x125\x125\x124\x134\x134\x12\x11\x134\x13\x11\x12\x11\x12\x11\x134\x134\x125\x125\x12\x11\x12\x11\x13\x11\x12\x11\x13\x11\x12\x11\x12\x11\x13\x11\x12\x11\x13\x11\x12\x11\x12\x11\x13\x11\x12\x11\x13\x11\x12\x11\x125\x12\x11\x13\x11\x12\x11\x125\x12\x11\x12\x12\x12\x11\x12\x00\r\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
# midea off command
packet_off = b'&\x00\xca\x00\x92\x90\x124\x13\x11\x125\x12\x11\x12\x11\x13\x11\x12\x11\x134\x12\x11\x13\x11\x125\x12\x11\x12\x11\x13\x11\x12\x11\x13\x11\x12\x11\x125\x125\x124\x13\x11\x12\x11\x12\x12\x12\x11\x125\x125\x125\x124\x125\x125\x124\x134\x134\x125\x125\x124\x134\x134\x125\x125\x124\x134\x13\x11\x124\x13\x11\x125\x124\x13\x11\x12\xab\x91\x90\x12\x11\x134\x12\x12\x124\x134\x125\x125\x12\x11\x125\x125\x12\x11\x125\x125\x124\x134\x125\x125\x12\x11\x12\x12\x12\x11\x125\x125\x124\x134\x12\x12\x12\x11\x12\x11\x13\x11\x12\x11\x12\x12\x12\x11\x12\x11\x13\x11\x12\x11\x12\x12\x12\x11\x12\x11\x12\x12\x12\x11\x12\x12\x12\x11\x12\x11\x125\x12\x11\x134\x12\x12\x12\x11\x125\x12\x00\r\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
#midea 78F cool mode
packet_78F = b'&\x00\xca\x00\x91\x90\x125\x12\x11\x125\x12\x11\x12\x12\x12\x11\x12\x11\x125\x125\x12\x11\x134\x12\x12\x12\x11\x12\x11\x12\x12\x12\x11\x12\x11\x134\x125\x125\x12\x11\x12\x12\x12\x11\x12\x11\x125\x125\x125\x124\x134\x125\x125\x124\x134\x125\x125\x125\x124\x125\x125\x125\x12\x11\x125\x12\x11\x125\x12\x11\x134\x125\x12\x11\x12\xab\x91\x90\x12\x12\x125\x11\x12\x107\x107\x106\x107\x10\x14\x10\x13\x107\x10\x13\x107\x107\x106\x116\x107\x107\x10\x13\x10\x14\x10\x13\x107\x106\x116\x107\x10\x13\x12\x12\x11\x12\x11\x13\x11\x12\x11\x12\x12\x12\x11\x12\x12\x12\x12\x11\x12\x11\x13\x11\x12\x11\x12\x11\x13\x11\x12\x11\x134\x12\x11\x134\x13\x11\x124\x13\x11\x12\x11\x125\x12\x00\r\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

def is_between_9_30_am_and_7_pm():
    now = time.localtime()
    hour = now.tm_hour + now.tm_min/100
    return 9.20 <= hour < 19

def is_device_on_network(target_ip):
    # Craft ARP request
    arp = ARP(pdst=target_ip)
    ether = Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = ether / arp

    # Send the packet and receive the response
    result = srp(packet, timeout=3, verbose=False)[0]

    # Check the result for the target device
    for sent, received in result:
        if received.haslayer(ARP):
            if received[ARP].op == 2:  # '2' is ARP reply
                if received[ARP].psrc == target_ip:
                    return True

    return False

while True:
    device.auth()
    if is_between_9_30_am_and_7_pm():
        try:
            if is_device_on_network('10.10.10.147'):
                device.send_data(packet_78F)
            else:
                device.send_data(packet_dry)
            #time.sleep(1200)
            time.sleep(120)
        except ValueError as e:
            print(e)
    else:
        try:
            device.send_data(packet_off)
        except ValueError as e:
            print(e)




